/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PFunctions : Node
{
}

public abstract class PFunction : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PVariableDeclareStatement : Node
{
}

public abstract class PConstantDeclareStatement : Node
{
}

public abstract class PMainFunction : Node
{
}

public abstract class PFuncDef : Node
{
}

public abstract class PDefParams : Node
{
}

public abstract class PDefParam : Node
{
}

public abstract class PProcCall : Node
{
}

public abstract class PNoParams : Node
{
}

public abstract class PParamCall : Node
{
}

public abstract class PParams : Node
{
}

public abstract class PParam : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PVariableAssignStatement : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PConstAssignStatement : Node
{
}

public abstract class PConditionalStatement : Node
{
}

public abstract class PIfStat : Node
{
}

public abstract class PElseStat : Node
{
}

public abstract class PWhileStat : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class PExpression5 : Node
{
}

public abstract class PExpression6 : Node
{
}

public abstract class PExpression7 : Node
{
}

public abstract class POperand1 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstants _constants_;
    private PFunctions _functions_;
    private PMainFunction _main_function_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstants _constants_,
            PFunctions _functions_,
            PMainFunction _main_function_
    )
    {
        SetConstants (_constants_);
        SetFunctions (_functions_);
        SetMainFunction (_main_function_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstants)CloneNode (_constants_),
            (PFunctions)CloneNode (_functions_),
            (PMainFunction)CloneNode (_main_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }
    public PMainFunction GetMainFunction ()
    {
        return _main_function_;
    }

    public void SetMainFunction (PMainFunction node)
    {
        if(_main_function_ != null)
        {
            _main_function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_functions_)
            + ToString (_main_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
        if ( _main_function_ == child )
        {
            _main_function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
        if ( _main_function_ == oldChild )
        {
            SetMainFunction ((PMainFunction) newChild);
            return;
        }
    }

}
public sealed class AFuncMultipleFunctions : PFunctions
{
    private PFunctions _functions_;
    private PFunction _function_;

    public AFuncMultipleFunctions ()
    {
    }

    public AFuncMultipleFunctions (
            PFunctions _functions_,
            PFunction _function_
    )
    {
        SetFunctions (_functions_);
        SetFunction (_function_);
    }

    public override Object Clone()
    {
        return new AFuncMultipleFunctions (
            (PFunctions)CloneNode (_functions_),
            (PFunction)CloneNode (_function_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncMultipleFunctions(this);
    }

    public PFunctions GetFunctions ()
    {
        return _functions_;
    }

    public void SetFunctions (PFunctions node)
    {
        if(_functions_ != null)
        {
            _functions_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _functions_ = node;
    }
    public PFunction GetFunction ()
    {
        return _function_;
    }

    public void SetFunction (PFunction node)
    {
        if(_function_ != null)
        {
            _function_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_functions_)
            + ToString (_function_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _functions_ == child )
        {
            _functions_ = null;
            return;
        }
        if ( _function_ == child )
        {
            _function_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _functions_ == oldChild )
        {
            SetFunctions ((PFunctions) newChild);
            return;
        }
        if ( _function_ == oldChild )
        {
            SetFunction ((PFunction) newChild);
            return;
        }
    }

}
public sealed class ASingleFunctions : PFunctions
{


    public ASingleFunctions (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleFunctions (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleFunctions(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFuncdefFunction : PFunction
{
    private PFuncDef _func_def_;

    public AFuncdefFunction ()
    {
    }

    public AFuncdefFunction (
            PFuncDef _func_def_
    )
    {
        SetFuncDef (_func_def_);
    }

    public override Object Clone()
    {
        return new AFuncdefFunction (
            (PFuncDef)CloneNode (_func_def_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncdefFunction(this);
    }

    public PFuncDef GetFuncDef ()
    {
        return _func_def_;
    }

    public void SetFuncDef (PFuncDef node)
    {
        if(_func_def_ != null)
        {
            _func_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _func_def_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_func_def_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _func_def_ == child )
        {
            _func_def_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _func_def_ == oldChild )
        {
            SetFuncDef ((PFuncDef) newChild);
            return;
        }
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{


    public ASingleStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ACondStatement : PStatement
{
    private PConditionalStatement _conditional_statement_;

    public ACondStatement ()
    {
    }

    public ACondStatement (
            PConditionalStatement _conditional_statement_
    )
    {
        SetConditionalStatement (_conditional_statement_);
    }

    public override Object Clone()
    {
        return new ACondStatement (
            (PConditionalStatement)CloneNode (_conditional_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACondStatement(this);
    }

    public PConditionalStatement GetConditionalStatement ()
    {
        return _conditional_statement_;
    }

    public void SetConditionalStatement (PConditionalStatement node)
    {
        if(_conditional_statement_ != null)
        {
            _conditional_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _conditional_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_conditional_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _conditional_statement_ == child )
        {
            _conditional_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _conditional_statement_ == oldChild )
        {
            SetConditionalStatement ((PConditionalStatement) newChild);
            return;
        }
    }

}
public sealed class AProccallStatement : PStatement
{
    private PProcCall _proc_call_;

    public AProccallStatement ()
    {
    }

    public AProccallStatement (
            PProcCall _proc_call_
    )
    {
        SetProcCall (_proc_call_);
    }

    public override Object Clone()
    {
        return new AProccallStatement (
            (PProcCall)CloneNode (_proc_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProccallStatement(this);
    }

    public PProcCall GetProcCall ()
    {
        return _proc_call_;
    }

    public void SetProcCall (PProcCall node)
    {
        if(_proc_call_ != null)
        {
            _proc_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _proc_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_proc_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _proc_call_ == child )
        {
            _proc_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _proc_call_ == oldChild )
        {
            SetProcCall ((PProcCall) newChild);
            return;
        }
    }

}
public sealed class AVarDeclarationDeclareStatement : PDeclareStatement
{
    private PVariableDeclareStatement _variable_declare_statement_;

    public AVarDeclarationDeclareStatement ()
    {
    }

    public AVarDeclarationDeclareStatement (
            PVariableDeclareStatement _variable_declare_statement_
    )
    {
        SetVariableDeclareStatement (_variable_declare_statement_);
    }

    public override Object Clone()
    {
        return new AVarDeclarationDeclareStatement (
            (PVariableDeclareStatement)CloneNode (_variable_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDeclarationDeclareStatement(this);
    }

    public PVariableDeclareStatement GetVariableDeclareStatement ()
    {
        return _variable_declare_statement_;
    }

    public void SetVariableDeclareStatement (PVariableDeclareStatement node)
    {
        if(_variable_declare_statement_ != null)
        {
            _variable_declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_declare_statement_ == child )
        {
            _variable_declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_declare_statement_ == oldChild )
        {
            SetVariableDeclareStatement ((PVariableDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AConstDeclarationDeclareStatement : PDeclareStatement
{
    private PConstantDeclareStatement _constant_declare_statement_;

    public AConstDeclarationDeclareStatement ()
    {
    }

    public AConstDeclarationDeclareStatement (
            PConstantDeclareStatement _constant_declare_statement_
    )
    {
        SetConstantDeclareStatement (_constant_declare_statement_);
    }

    public override Object Clone()
    {
        return new AConstDeclarationDeclareStatement (
            (PConstantDeclareStatement)CloneNode (_constant_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstDeclarationDeclareStatement(this);
    }

    public PConstantDeclareStatement GetConstantDeclareStatement ()
    {
        return _constant_declare_statement_;
    }

    public void SetConstantDeclareStatement (PConstantDeclareStatement node)
    {
        if(_constant_declare_statement_ != null)
        {
            _constant_declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constant_declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constant_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constant_declare_statement_ == child )
        {
            _constant_declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constant_declare_statement_ == oldChild )
        {
            SetConstantDeclareStatement ((PConstantDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class AVariableDeclareStatement : PVariableDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public AVariableDeclareStatement ()
    {
    }

    public AVariableDeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AVariableDeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableDeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AConstantDeclareStatement : PConstantDeclareStatement
{
    private TTypeConst _const_;
    private TId _type_;
    private PConstAssignStatement _const_assign_statement_;

    public AConstantDeclareStatement ()
    {
    }

    public AConstantDeclareStatement (
            TTypeConst _const_,
            TId _type_,
            PConstAssignStatement _const_assign_statement_
    )
    {
        SetConst (_const_);
        SetType (_type_);
        SetConstAssignStatement (_const_assign_statement_);
    }

    public override Object Clone()
    {
        return new AConstantDeclareStatement (
            (TTypeConst)CloneNode (_const_),
            (TId)CloneNode (_type_),
            (PConstAssignStatement)CloneNode (_const_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantDeclareStatement(this);
    }

    public TTypeConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TTypeConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public PConstAssignStatement GetConstAssignStatement ()
    {
        return _const_assign_statement_;
    }

    public void SetConstAssignStatement (PConstAssignStatement node)
    {
        if(_const_assign_statement_ != null)
        {
            _const_assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_type_)
            + ToString (_const_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _const_assign_statement_ == child )
        {
            _const_assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TTypeConst) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _const_assign_statement_ == oldChild )
        {
            SetConstAssignStatement ((PConstAssignStatement) newChild);
            return;
        }
    }

}
public sealed class AMainFunction : PMainFunction
{
    private TMainDef _main_def_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;
    private TLCurly _l_curly_;
    private PStatements _statements_;
    private TRCurly _r_curly_;

    public AMainFunction ()
    {
    }

    public AMainFunction (
            TMainDef _main_def_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_,
            TLCurly _l_curly_,
            PStatements _statements_,
            TRCurly _r_curly_
    )
    {
        SetMainDef (_main_def_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
        SetLCurly (_l_curly_);
        SetStatements (_statements_);
        SetRCurly (_r_curly_);
    }

    public override Object Clone()
    {
        return new AMainFunction (
            (TMainDef)CloneNode (_main_def_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TLCurly)CloneNode (_l_curly_),
            (PStatements)CloneNode (_statements_),
            (TRCurly)CloneNode (_r_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainFunction(this);
    }

    public TMainDef GetMainDef ()
    {
        return _main_def_;
    }

    public void SetMainDef (TMainDef node)
    {
        if(_main_def_ != null)
        {
            _main_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_def_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TLCurly GetLCurly ()
    {
        return _l_curly_;
    }

    public void SetLCurly (TLCurly node)
    {
        if(_l_curly_ != null)
        {
            _l_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRCurly GetRCurly ()
    {
        return _r_curly_;
    }

    public void SetRCurly (TRCurly node)
    {
        if(_r_curly_ != null)
        {
            _r_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_def_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
            + ToString (_l_curly_)
            + ToString (_statements_)
            + ToString (_r_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_def_ == child )
        {
            _main_def_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _l_curly_ == child )
        {
            _l_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_curly_ == child )
        {
            _r_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_def_ == oldChild )
        {
            SetMainDef ((TMainDef) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _l_curly_ == oldChild )
        {
            SetLCurly ((TLCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_curly_ == oldChild )
        {
            SetRCurly ((TRCurly) newChild);
            return;
        }
    }

}
public sealed class AParamsFuncDef : PFuncDef
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private PDefParams _def_params_;
    private TCloseParenthesis _close_parenthesis_;
    private TLCurly _l_curly_;
    private PStatements _statements_;
    private TRCurly _r_curly_;

    public AParamsFuncDef ()
    {
    }

    public AParamsFuncDef (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            PDefParams _def_params_,
            TCloseParenthesis _close_parenthesis_,
            TLCurly _l_curly_,
            PStatements _statements_,
            TRCurly _r_curly_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetDefParams (_def_params_);
        SetCloseParenthesis (_close_parenthesis_);
        SetLCurly (_l_curly_);
        SetStatements (_statements_);
        SetRCurly (_r_curly_);
    }

    public override Object Clone()
    {
        return new AParamsFuncDef (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PDefParams)CloneNode (_def_params_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TLCurly)CloneNode (_l_curly_),
            (PStatements)CloneNode (_statements_),
            (TRCurly)CloneNode (_r_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsFuncDef(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PDefParams GetDefParams ()
    {
        return _def_params_;
    }

    public void SetDefParams (PDefParams node)
    {
        if(_def_params_ != null)
        {
            _def_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _def_params_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TLCurly GetLCurly ()
    {
        return _l_curly_;
    }

    public void SetLCurly (TLCurly node)
    {
        if(_l_curly_ != null)
        {
            _l_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRCurly GetRCurly ()
    {
        return _r_curly_;
    }

    public void SetRCurly (TRCurly node)
    {
        if(_r_curly_ != null)
        {
            _r_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_def_params_)
            + ToString (_close_parenthesis_)
            + ToString (_l_curly_)
            + ToString (_statements_)
            + ToString (_r_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _def_params_ == child )
        {
            _def_params_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _l_curly_ == child )
        {
            _l_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_curly_ == child )
        {
            _r_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _def_params_ == oldChild )
        {
            SetDefParams ((PDefParams) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _l_curly_ == oldChild )
        {
            SetLCurly ((TLCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_curly_ == oldChild )
        {
            SetRCurly ((TRCurly) newChild);
            return;
        }
    }

}
public sealed class ANoparamsFuncDef : PFuncDef
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;
    private TLCurly _l_curly_;
    private PStatements _statements_;
    private TRCurly _r_curly_;

    public ANoparamsFuncDef ()
    {
    }

    public ANoparamsFuncDef (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_,
            TLCurly _l_curly_,
            PStatements _statements_,
            TRCurly _r_curly_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
        SetLCurly (_l_curly_);
        SetStatements (_statements_);
        SetRCurly (_r_curly_);
    }

    public override Object Clone()
    {
        return new ANoparamsFuncDef (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TLCurly)CloneNode (_l_curly_),
            (PStatements)CloneNode (_statements_),
            (TRCurly)CloneNode (_r_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoparamsFuncDef(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TLCurly GetLCurly ()
    {
        return _l_curly_;
    }

    public void SetLCurly (TLCurly node)
    {
        if(_l_curly_ != null)
        {
            _l_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRCurly GetRCurly ()
    {
        return _r_curly_;
    }

    public void SetRCurly (TRCurly node)
    {
        if(_r_curly_ != null)
        {
            _r_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
            + ToString (_l_curly_)
            + ToString (_statements_)
            + ToString (_r_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _l_curly_ == child )
        {
            _l_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_curly_ == child )
        {
            _r_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _l_curly_ == oldChild )
        {
            SetLCurly ((TLCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_curly_ == oldChild )
        {
            SetRCurly ((TRCurly) newChild);
            return;
        }
    }

}
public sealed class AMultipleDefParams : PDefParams
{
    private PDefParams _def_params_;
    private TComma _comma_;
    private PDefParam _def_param_;

    public AMultipleDefParams ()
    {
    }

    public AMultipleDefParams (
            PDefParams _def_params_,
            TComma _comma_,
            PDefParam _def_param_
    )
    {
        SetDefParams (_def_params_);
        SetComma (_comma_);
        SetDefParam (_def_param_);
    }

    public override Object Clone()
    {
        return new AMultipleDefParams (
            (PDefParams)CloneNode (_def_params_),
            (TComma)CloneNode (_comma_),
            (PDefParam)CloneNode (_def_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleDefParams(this);
    }

    public PDefParams GetDefParams ()
    {
        return _def_params_;
    }

    public void SetDefParams (PDefParams node)
    {
        if(_def_params_ != null)
        {
            _def_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _def_params_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PDefParam GetDefParam ()
    {
        return _def_param_;
    }

    public void SetDefParam (PDefParam node)
    {
        if(_def_param_ != null)
        {
            _def_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _def_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_def_params_)
            + ToString (_comma_)
            + ToString (_def_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _def_params_ == child )
        {
            _def_params_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _def_param_ == child )
        {
            _def_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _def_params_ == oldChild )
        {
            SetDefParams ((PDefParams) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _def_param_ == oldChild )
        {
            SetDefParam ((PDefParam) newChild);
            return;
        }
    }

}
public sealed class APassingleDefParams : PDefParams
{
    private PDefParam _def_param_;

    public APassingleDefParams ()
    {
    }

    public APassingleDefParams (
            PDefParam _def_param_
    )
    {
        SetDefParam (_def_param_);
    }

    public override Object Clone()
    {
        return new APassingleDefParams (
            (PDefParam)CloneNode (_def_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassingleDefParams(this);
    }

    public PDefParam GetDefParam ()
    {
        return _def_param_;
    }

    public void SetDefParam (PDefParam node)
    {
        if(_def_param_ != null)
        {
            _def_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _def_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_def_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _def_param_ == child )
        {
            _def_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _def_param_ == oldChild )
        {
            SetDefParam ((PDefParam) newChild);
            return;
        }
    }

}
public sealed class ADefParam : PDefParam
{
    private TId _type_;
    private TId _varname_;

    public ADefParam ()
    {
    }

    public ADefParam (
            TId _type_,
            TId _varname_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
    }

    public override Object Clone()
    {
        return new ADefParam (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADefParam(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
    }

}
public sealed class AParamsProcCall : PProcCall
{
    private PParamCall _param_call_;

    public AParamsProcCall ()
    {
    }

    public AParamsProcCall (
            PParamCall _param_call_
    )
    {
        SetParamCall (_param_call_);
    }

    public override Object Clone()
    {
        return new AParamsProcCall (
            (PParamCall)CloneNode (_param_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamsProcCall(this);
    }

    public PParamCall GetParamCall ()
    {
        return _param_call_;
    }

    public void SetParamCall (PParamCall node)
    {
        if(_param_call_ != null)
        {
            _param_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_param_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _param_call_ == child )
        {
            _param_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _param_call_ == oldChild )
        {
            SetParamCall ((PParamCall) newChild);
            return;
        }
    }

}
public sealed class ANoparamsProcCall : PProcCall
{
    private PNoParams _no_params_;

    public ANoparamsProcCall ()
    {
    }

    public ANoparamsProcCall (
            PNoParams _no_params_
    )
    {
        SetNoParams (_no_params_);
    }

    public override Object Clone()
    {
        return new ANoparamsProcCall (
            (PNoParams)CloneNode (_no_params_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoparamsProcCall(this);
    }

    public PNoParams GetNoParams ()
    {
        return _no_params_;
    }

    public void SetNoParams (PNoParams node)
    {
        if(_no_params_ != null)
        {
            _no_params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _no_params_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_no_params_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _no_params_ == child )
        {
            _no_params_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _no_params_ == oldChild )
        {
            SetNoParams ((PNoParams) newChild);
            return;
        }
    }

}
public sealed class ANoParams : PNoParams
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private TCloseParenthesis _close_parenthesis_;
    private TEol _eol_;

    public ANoParams ()
    {
    }

    public ANoParams (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            TCloseParenthesis _close_parenthesis_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetCloseParenthesis (_close_parenthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ANoParams (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoParams(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_close_parenthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AParamCall : PParamCall
{
    private TId _id_;
    private TOpenParenthesis _open_parenthesis_;
    private PParams _params_;
    private TCloseParenthesis _close_parenthesis_;
    private TEol _eol_;

    public AParamCall ()
    {
    }

    public AParamCall (
            TId _id_,
            TOpenParenthesis _open_parenthesis_,
            PParams _params_,
            TCloseParenthesis _close_parenthesis_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetOpenParenthesis (_open_parenthesis_);
        SetParams (_params_);
        SetCloseParenthesis (_close_parenthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AParamCall (
            (TId)CloneNode (_id_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PParams)CloneNode (_params_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParamCall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_open_parenthesis_)
            + ToString (_params_)
            + ToString (_close_parenthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleParams : PParams
{
    private PParams _params_;
    private TComma _comma_;
    private PParam _param_;

    public AMultipleParams ()
    {
    }

    public AMultipleParams (
            PParams _params_,
            TComma _comma_,
            PParam _param_
    )
    {
        SetParams (_params_);
        SetComma (_comma_);
        SetParam (_param_);
    }

    public override Object Clone()
    {
        return new AMultipleParams (
            (PParams)CloneNode (_params_),
            (TComma)CloneNode (_comma_),
            (PParam)CloneNode (_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParams(this);
    }

    public PParams GetParams ()
    {
        return _params_;
    }

    public void SetParams (PParams node)
    {
        if(_params_ != null)
        {
            _params_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _params_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PParam GetParam ()
    {
        return _param_;
    }

    public void SetParam (PParam node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_params_)
            + ToString (_comma_)
            + ToString (_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _params_ == child )
        {
            _params_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _params_ == oldChild )
        {
            SetParams ((PParams) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _param_ == oldChild )
        {
            SetParam ((PParam) newChild);
            return;
        }
    }

}
public sealed class APassParams : PParams
{
    private PParam _param_;

    public APassParams ()
    {
    }

    public APassParams (
            PParam _param_
    )
    {
        SetParam (_param_);
    }

    public override Object Clone()
    {
        return new APassParams (
            (PParam)CloneNode (_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassParams(this);
    }

    public PParam GetParam ()
    {
        return _param_;
    }

    public void SetParam (PParam node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _param_ == oldChild )
        {
            SetParam ((PParam) newChild);
            return;
        }
    }

}
public sealed class AParam : PParam
{
    private POperand _operand_;

    public AParam ()
    {
    }

    public AParam (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new AParam (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParam(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AVariableAssignAssignStatement : PAssignStatement
{
    private PVariableAssignStatement _variable_assign_statement_;

    public AVariableAssignAssignStatement ()
    {
    }

    public AVariableAssignAssignStatement (
            PVariableAssignStatement _variable_assign_statement_
    )
    {
        SetVariableAssignStatement (_variable_assign_statement_);
    }

    public override Object Clone()
    {
        return new AVariableAssignAssignStatement (
            (PVariableAssignStatement)CloneNode (_variable_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableAssignAssignStatement(this);
    }

    public PVariableAssignStatement GetVariableAssignStatement ()
    {
        return _variable_assign_statement_;
    }

    public void SetVariableAssignStatement (PVariableAssignStatement node)
    {
        if(_variable_assign_statement_ != null)
        {
            _variable_assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_assign_statement_ == child )
        {
            _variable_assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_assign_statement_ == oldChild )
        {
            SetVariableAssignStatement ((PVariableAssignStatement) newChild);
            return;
        }
    }

}
public sealed class AVariableAssignStatement : PVariableAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AVariableAssignStatement ()
    {
    }

    public AVariableAssignStatement (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AVariableAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AConstantMultipleConstants : PConstants
{
    private PConstants _constants_;
    private PConstAssignStatement _const_assign_statement_;

    public AConstantMultipleConstants ()
    {
    }

    public AConstantMultipleConstants (
            PConstants _constants_,
            PConstAssignStatement _const_assign_statement_
    )
    {
        SetConstants (_constants_);
        SetConstAssignStatement (_const_assign_statement_);
    }

    public override Object Clone()
    {
        return new AConstantMultipleConstants (
            (PConstants)CloneNode (_constants_),
            (PConstAssignStatement)CloneNode (_const_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstantMultipleConstants(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PConstAssignStatement GetConstAssignStatement ()
    {
        return _const_assign_statement_;
    }

    public void SetConstAssignStatement (PConstAssignStatement node)
    {
        if(_const_assign_statement_ != null)
        {
            _const_assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_const_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _const_assign_statement_ == child )
        {
            _const_assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _const_assign_statement_ == oldChild )
        {
            SetConstAssignStatement ((PConstAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ASingleConstants : PConstants
{


    public ASingleConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AConstAssignStatement : PConstAssignStatement
{
    private TTypeConst _type_const_;
    private TId _type_;
    private TId _varname_;
    private TAssign _assign_;
    private PExpression _expression_;

    public AConstAssignStatement ()
    {
    }

    public AConstAssignStatement (
            TTypeConst _type_const_,
            TId _type_,
            TId _varname_,
            TAssign _assign_,
            PExpression _expression_
    )
    {
        SetTypeConst (_type_const_);
        SetType (_type_);
        SetVarname (_varname_);
        SetAssign (_assign_);
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AConstAssignStatement (
            (TTypeConst)CloneNode (_type_const_),
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstAssignStatement(this);
    }

    public TTypeConst GetTypeConst ()
    {
        return _type_const_;
    }

    public void SetTypeConst (TTypeConst node)
    {
        if(_type_const_ != null)
        {
            _type_const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_const_ = node;
    }
    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_const_)
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_assign_)
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_const_ == child )
        {
            _type_const_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_const_ == oldChild )
        {
            SetTypeConst ((TTypeConst) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AIfConditionalStatement : PConditionalStatement
{
    private PIfStat _if_stat_;

    public AIfConditionalStatement ()
    {
    }

    public AIfConditionalStatement (
            PIfStat _if_stat_
    )
    {
        SetIfStat (_if_stat_);
    }

    public override Object Clone()
    {
        return new AIfConditionalStatement (
            (PIfStat)CloneNode (_if_stat_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfConditionalStatement(this);
    }

    public PIfStat GetIfStat ()
    {
        return _if_stat_;
    }

    public void SetIfStat (PIfStat node)
    {
        if(_if_stat_ != null)
        {
            _if_stat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_stat_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_stat_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_stat_ == child )
        {
            _if_stat_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_stat_ == oldChild )
        {
            SetIfStat ((PIfStat) newChild);
            return;
        }
    }

}
public sealed class AWhileConditionalStatement : PConditionalStatement
{
    private PWhileStat _while_stat_;

    public AWhileConditionalStatement ()
    {
    }

    public AWhileConditionalStatement (
            PWhileStat _while_stat_
    )
    {
        SetWhileStat (_while_stat_);
    }

    public override Object Clone()
    {
        return new AWhileConditionalStatement (
            (PWhileStat)CloneNode (_while_stat_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileConditionalStatement(this);
    }

    public PWhileStat GetWhileStat ()
    {
        return _while_stat_;
    }

    public void SetWhileStat (PWhileStat node)
    {
        if(_while_stat_ != null)
        {
            _while_stat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_stat_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_stat_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_stat_ == child )
        {
            _while_stat_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_stat_ == oldChild )
        {
            SetWhileStat ((PWhileStat) newChild);
            return;
        }
    }

}
public sealed class AIfIfStat : PIfStat
{
    private TIfDef _if_def_;
    private TOpenParenthesis _open_parenthesis_;
    private PExpression _expression_;
    private TCloseParenthesis _close_parenthesis_;
    private TLCurly _l_curly_;
    private PStatements _statements_;
    private TRCurly _r_curly_;
    private PElseStat _else_stat_;

    public AIfIfStat ()
    {
    }

    public AIfIfStat (
            TIfDef _if_def_,
            TOpenParenthesis _open_parenthesis_,
            PExpression _expression_,
            TCloseParenthesis _close_parenthesis_,
            TLCurly _l_curly_,
            PStatements _statements_,
            TRCurly _r_curly_,
            PElseStat _else_stat_
    )
    {
        SetIfDef (_if_def_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExpression (_expression_);
        SetCloseParenthesis (_close_parenthesis_);
        SetLCurly (_l_curly_);
        SetStatements (_statements_);
        SetRCurly (_r_curly_);
        SetElseStat (_else_stat_);
    }

    public override Object Clone()
    {
        return new AIfIfStat (
            (TIfDef)CloneNode (_if_def_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TLCurly)CloneNode (_l_curly_),
            (PStatements)CloneNode (_statements_),
            (TRCurly)CloneNode (_r_curly_),
            (PElseStat)CloneNode (_else_stat_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfIfStat(this);
    }

    public TIfDef GetIfDef ()
    {
        return _if_def_;
    }

    public void SetIfDef (TIfDef node)
    {
        if(_if_def_ != null)
        {
            _if_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_def_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TLCurly GetLCurly ()
    {
        return _l_curly_;
    }

    public void SetLCurly (TLCurly node)
    {
        if(_l_curly_ != null)
        {
            _l_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRCurly GetRCurly ()
    {
        return _r_curly_;
    }

    public void SetRCurly (TRCurly node)
    {
        if(_r_curly_ != null)
        {
            _r_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_curly_ = node;
    }
    public PElseStat GetElseStat ()
    {
        return _else_stat_;
    }

    public void SetElseStat (PElseStat node)
    {
        if(_else_stat_ != null)
        {
            _else_stat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_stat_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_def_)
            + ToString (_open_parenthesis_)
            + ToString (_expression_)
            + ToString (_close_parenthesis_)
            + ToString (_l_curly_)
            + ToString (_statements_)
            + ToString (_r_curly_)
            + ToString (_else_stat_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_def_ == child )
        {
            _if_def_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _l_curly_ == child )
        {
            _l_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_curly_ == child )
        {
            _r_curly_ = null;
            return;
        }
        if ( _else_stat_ == child )
        {
            _else_stat_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_def_ == oldChild )
        {
            SetIfDef ((TIfDef) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _l_curly_ == oldChild )
        {
            SetLCurly ((TLCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_curly_ == oldChild )
        {
            SetRCurly ((TRCurly) newChild);
            return;
        }
        if ( _else_stat_ == oldChild )
        {
            SetElseStat ((PElseStat) newChild);
            return;
        }
    }

}
public sealed class ASomethingElseStat : PElseStat
{
    private TElseDef _else_def_;
    private TLCurly _l_curly_;
    private PStatements _statements_;
    private TRCurly _r_curly_;

    public ASomethingElseStat ()
    {
    }

    public ASomethingElseStat (
            TElseDef _else_def_,
            TLCurly _l_curly_,
            PStatements _statements_,
            TRCurly _r_curly_
    )
    {
        SetElseDef (_else_def_);
        SetLCurly (_l_curly_);
        SetStatements (_statements_);
        SetRCurly (_r_curly_);
    }

    public override Object Clone()
    {
        return new ASomethingElseStat (
            (TElseDef)CloneNode (_else_def_),
            (TLCurly)CloneNode (_l_curly_),
            (PStatements)CloneNode (_statements_),
            (TRCurly)CloneNode (_r_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomethingElseStat(this);
    }

    public TElseDef GetElseDef ()
    {
        return _else_def_;
    }

    public void SetElseDef (TElseDef node)
    {
        if(_else_def_ != null)
        {
            _else_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_def_ = node;
    }
    public TLCurly GetLCurly ()
    {
        return _l_curly_;
    }

    public void SetLCurly (TLCurly node)
    {
        if(_l_curly_ != null)
        {
            _l_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRCurly GetRCurly ()
    {
        return _r_curly_;
    }

    public void SetRCurly (TRCurly node)
    {
        if(_r_curly_ != null)
        {
            _r_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_else_def_)
            + ToString (_l_curly_)
            + ToString (_statements_)
            + ToString (_r_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _else_def_ == child )
        {
            _else_def_ = null;
            return;
        }
        if ( _l_curly_ == child )
        {
            _l_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_curly_ == child )
        {
            _r_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _else_def_ == oldChild )
        {
            SetElseDef ((TElseDef) newChild);
            return;
        }
        if ( _l_curly_ == oldChild )
        {
            SetLCurly ((TLCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_curly_ == oldChild )
        {
            SetRCurly ((TRCurly) newChild);
            return;
        }
    }

}
public sealed class ANoneElseStat : PElseStat
{


    public ANoneElseStat (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneElseStat (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneElseStat(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AWhileStat : PWhileStat
{
    private TWhileDef _while_def_;
    private TOpenParenthesis _open_parenthesis_;
    private PExpression _expression_;
    private TCloseParenthesis _close_parenthesis_;
    private TLCurly _l_curly_;
    private PStatements _statements_;
    private TRCurly _r_curly_;

    public AWhileStat ()
    {
    }

    public AWhileStat (
            TWhileDef _while_def_,
            TOpenParenthesis _open_parenthesis_,
            PExpression _expression_,
            TCloseParenthesis _close_parenthesis_,
            TLCurly _l_curly_,
            PStatements _statements_,
            TRCurly _r_curly_
    )
    {
        SetWhileDef (_while_def_);
        SetOpenParenthesis (_open_parenthesis_);
        SetExpression (_expression_);
        SetCloseParenthesis (_close_parenthesis_);
        SetLCurly (_l_curly_);
        SetStatements (_statements_);
        SetRCurly (_r_curly_);
    }

    public override Object Clone()
    {
        return new AWhileStat (
            (TWhileDef)CloneNode (_while_def_),
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_),
            (TLCurly)CloneNode (_l_curly_),
            (PStatements)CloneNode (_statements_),
            (TRCurly)CloneNode (_r_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStat(this);
    }

    public TWhileDef GetWhileDef ()
    {
        return _while_def_;
    }

    public void SetWhileDef (TWhileDef node)
    {
        if(_while_def_ != null)
        {
            _while_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_def_ = node;
    }
    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }
    public TLCurly GetLCurly ()
    {
        return _l_curly_;
    }

    public void SetLCurly (TLCurly node)
    {
        if(_l_curly_ != null)
        {
            _l_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRCurly GetRCurly ()
    {
        return _r_curly_;
    }

    public void SetRCurly (TRCurly node)
    {
        if(_r_curly_ != null)
        {
            _r_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_def_)
            + ToString (_open_parenthesis_)
            + ToString (_expression_)
            + ToString (_close_parenthesis_)
            + ToString (_l_curly_)
            + ToString (_statements_)
            + ToString (_r_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_def_ == child )
        {
            _while_def_ = null;
            return;
        }
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
        if ( _l_curly_ == child )
        {
            _l_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _r_curly_ == child )
        {
            _r_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_def_ == oldChild )
        {
            SetWhileDef ((TWhileDef) newChild);
            return;
        }
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
        if ( _l_curly_ == oldChild )
        {
            SetLCurly ((TLCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _r_curly_ == oldChild )
        {
            SetRCurly ((TRCurly) newChild);
            return;
        }
    }

}
public sealed class AOrExpression : PExpression
{
    private PExpression5 _one_;
    private TLogOr _log_or_;
    private PExpression5 _two_;

    public AOrExpression ()
    {
    }

    public AOrExpression (
            PExpression5 _one_,
            TLogOr _log_or_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogOr (_log_or_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AOrExpression (
            (PExpression5)CloneNode (_one_),
            (TLogOr)CloneNode (_log_or_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrExpression(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogOr GetLogOr ()
    {
        return _log_or_;
    }

    public void SetLogOr (TLogOr node)
    {
        if(_log_or_ != null)
        {
            _log_or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_or_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_or_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_or_ == child )
        {
            _log_or_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_or_ == oldChild )
        {
            SetLogOr ((TLogOr) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AAndExpression2 : PExpression2
{
    private PExpression5 _one_;
    private TLogAnd _log_and_;
    private PExpression5 _two_;

    public AAndExpression2 ()
    {
    }

    public AAndExpression2 (
            PExpression5 _one_,
            TLogAnd _log_and_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogAnd (_log_and_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AAndExpression2 (
            (PExpression5)CloneNode (_one_),
            (TLogAnd)CloneNode (_log_and_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExpression2(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogAnd GetLogAnd ()
    {
        return _log_and_;
    }

    public void SetLogAnd (TLogAnd node)
    {
        if(_log_and_ != null)
        {
            _log_and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_and_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_and_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_and_ == child )
        {
            _log_and_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_and_ == oldChild )
        {
            SetLogAnd ((TLogAnd) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ANotExpression3 : PExpression3
{
    private TLogNot _log_not_;
    private PExpression5 _expression5_;

    public ANotExpression3 ()
    {
    }

    public ANotExpression3 (
            TLogNot _log_not_,
            PExpression5 _expression5_
    )
    {
        SetLogNot (_log_not_);
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new ANotExpression3 (
            (TLogNot)CloneNode (_log_not_),
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotExpression3(this);
    }

    public TLogNot GetLogNot ()
    {
        return _log_not_;
    }

    public void SetLogNot (TLogNot node)
    {
        if(_log_not_ != null)
        {
            _log_not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_not_ = node;
    }
    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_log_not_)
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _log_not_ == child )
        {
            _log_not_ = null;
            return;
        }
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _log_not_ == oldChild )
        {
            SetLogNot ((TLogNot) newChild);
            return;
        }
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AEqualExpression3 : PExpression3
{
    private PExpression5 _one_;
    private TLogEquiv _log_equiv_;
    private PExpression5 _two_;

    public AEqualExpression3 ()
    {
    }

    public AEqualExpression3 (
            PExpression5 _one_,
            TLogEquiv _log_equiv_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogEquiv (_log_equiv_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AEqualExpression3 (
            (PExpression5)CloneNode (_one_),
            (TLogEquiv)CloneNode (_log_equiv_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualExpression3(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogEquiv GetLogEquiv ()
    {
        return _log_equiv_;
    }

    public void SetLogEquiv (TLogEquiv node)
    {
        if(_log_equiv_ != null)
        {
            _log_equiv_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_equiv_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_equiv_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_equiv_ == child )
        {
            _log_equiv_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_equiv_ == oldChild )
        {
            SetLogEquiv ((TLogEquiv) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class AGreaterExpression4 : PExpression4
{
    private PExpression5 _one_;
    private TLogGreat _log_great_;
    private PExpression5 _two_;

    public AGreaterExpression4 ()
    {
    }

    public AGreaterExpression4 (
            PExpression5 _one_,
            TLogGreat _log_great_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogGreat (_log_great_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AGreaterExpression4 (
            (PExpression5)CloneNode (_one_),
            (TLogGreat)CloneNode (_log_great_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterExpression4(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogGreat GetLogGreat ()
    {
        return _log_great_;
    }

    public void SetLogGreat (TLogGreat node)
    {
        if(_log_great_ != null)
        {
            _log_great_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_great_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_great_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_great_ == child )
        {
            _log_great_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_great_ == oldChild )
        {
            SetLogGreat ((TLogGreat) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class ALessExpression4 : PExpression4
{
    private PExpression5 _one_;
    private TLogLess _log_less_;
    private PExpression5 _two_;

    public ALessExpression4 ()
    {
    }

    public ALessExpression4 (
            PExpression5 _one_,
            TLogLess _log_less_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogLess (_log_less_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ALessExpression4 (
            (PExpression5)CloneNode (_one_),
            (TLogLess)CloneNode (_log_less_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessExpression4(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogLess GetLogLess ()
    {
        return _log_less_;
    }

    public void SetLogLess (TLogLess node)
    {
        if(_log_less_ != null)
        {
            _log_less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_less_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_less_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_less_ == child )
        {
            _log_less_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_less_ == oldChild )
        {
            SetLogLess ((TLogLess) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AGreatequalExpression4 : PExpression4
{
    private PExpression5 _one_;
    private TLogGreatEq _log_great_eq_;
    private PExpression5 _two_;

    public AGreatequalExpression4 ()
    {
    }

    public AGreatequalExpression4 (
            PExpression5 _one_,
            TLogGreatEq _log_great_eq_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogGreatEq (_log_great_eq_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new AGreatequalExpression4 (
            (PExpression5)CloneNode (_one_),
            (TLogGreatEq)CloneNode (_log_great_eq_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreatequalExpression4(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogGreatEq GetLogGreatEq ()
    {
        return _log_great_eq_;
    }

    public void SetLogGreatEq (TLogGreatEq node)
    {
        if(_log_great_eq_ != null)
        {
            _log_great_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_great_eq_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_great_eq_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_great_eq_ == child )
        {
            _log_great_eq_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_great_eq_ == oldChild )
        {
            SetLogGreatEq ((TLogGreatEq) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class ALessequalExpression4 : PExpression4
{
    private PExpression5 _one_;
    private TLogLessEq _log_less_eq_;
    private PExpression5 _two_;

    public ALessequalExpression4 ()
    {
    }

    public ALessequalExpression4 (
            PExpression5 _one_,
            TLogLessEq _log_less_eq_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogLessEq (_log_less_eq_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ALessequalExpression4 (
            (PExpression5)CloneNode (_one_),
            (TLogLessEq)CloneNode (_log_less_eq_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessequalExpression4(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogLessEq GetLogLessEq ()
    {
        return _log_less_eq_;
    }

    public void SetLogLessEq (TLogLessEq node)
    {
        if(_log_less_eq_ != null)
        {
            _log_less_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_less_eq_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_less_eq_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_less_eq_ == child )
        {
            _log_less_eq_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_less_eq_ == oldChild )
        {
            SetLogLessEq ((TLogLessEq) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class ANotequalExpression4 : PExpression4
{
    private PExpression5 _one_;
    private TLogNotEq _log_not_eq_;
    private PExpression5 _two_;

    public ANotequalExpression4 ()
    {
    }

    public ANotequalExpression4 (
            PExpression5 _one_,
            TLogNotEq _log_not_eq_,
            PExpression5 _two_
    )
    {
        SetOne (_one_);
        SetLogNotEq (_log_not_eq_);
        SetTwo (_two_);
    }

    public override Object Clone()
    {
        return new ANotequalExpression4 (
            (PExpression5)CloneNode (_one_),
            (TLogNotEq)CloneNode (_log_not_eq_),
            (PExpression5)CloneNode (_two_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotequalExpression4(this);
    }

    public PExpression5 GetOne ()
    {
        return _one_;
    }

    public void SetOne (PExpression5 node)
    {
        if(_one_ != null)
        {
            _one_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _one_ = node;
    }
    public TLogNotEq GetLogNotEq ()
    {
        return _log_not_eq_;
    }

    public void SetLogNotEq (TLogNotEq node)
    {
        if(_log_not_eq_ != null)
        {
            _log_not_eq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _log_not_eq_ = node;
    }
    public PExpression5 GetTwo ()
    {
        return _two_;
    }

    public void SetTwo (PExpression5 node)
    {
        if(_two_ != null)
        {
            _two_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _two_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_one_)
            + ToString (_log_not_eq_)
            + ToString (_two_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _one_ == child )
        {
            _one_ = null;
            return;
        }
        if ( _log_not_eq_ == child )
        {
            _log_not_eq_ = null;
            return;
        }
        if ( _two_ == child )
        {
            _two_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _one_ == oldChild )
        {
            SetOne ((PExpression5) newChild);
            return;
        }
        if ( _log_not_eq_ == oldChild )
        {
            SetLogNotEq ((TLogNotEq) newChild);
            return;
        }
        if ( _two_ == oldChild )
        {
            SetTwo ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private PExpression5 _expression5_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            PExpression5 _expression5_
    )
    {
        SetExpression5 (_expression5_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (PExpression5)CloneNode (_expression5_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
    }

}
public sealed class AAddExpression5 : PExpression5
{
    private PExpression5 _expression5_;
    private TPlus _plus_;
    private PExpression6 _expression6_;

    public AAddExpression5 ()
    {
    }

    public AAddExpression5 (
            PExpression5 _expression5_,
            TPlus _plus_,
            PExpression6 _expression6_
    )
    {
        SetExpression5 (_expression5_);
        SetPlus (_plus_);
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new AAddExpression5 (
            (PExpression5)CloneNode (_expression5_),
            (TPlus)CloneNode (_plus_),
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression5(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
            + ToString (_plus_)
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class ASubExpression5 : PExpression5
{
    private PExpression5 _expression5_;
    private TSub _sub_;
    private PExpression6 _expression6_;

    public ASubExpression5 ()
    {
    }

    public ASubExpression5 (
            PExpression5 _expression5_,
            TSub _sub_,
            PExpression6 _expression6_
    )
    {
        SetExpression5 (_expression5_);
        SetSub (_sub_);
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new ASubExpression5 (
            (PExpression5)CloneNode (_expression5_),
            (TSub)CloneNode (_sub_),
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubExpression5(this);
    }

    public PExpression5 GetExpression5 ()
    {
        return _expression5_;
    }

    public void SetExpression5 (PExpression5 node)
    {
        if(_expression5_ != null)
        {
            _expression5_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression5_ = node;
    }
    public TSub GetSub ()
    {
        return _sub_;
    }

    public void SetSub (TSub node)
    {
        if(_sub_ != null)
        {
            _sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sub_ = node;
    }
    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression5_)
            + ToString (_sub_)
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression5_ == child )
        {
            _expression5_ = null;
            return;
        }
        if ( _sub_ == child )
        {
            _sub_ = null;
            return;
        }
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression5_ == oldChild )
        {
            SetExpression5 ((PExpression5) newChild);
            return;
        }
        if ( _sub_ == oldChild )
        {
            SetSub ((TSub) newChild);
            return;
        }
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class APassExpression5 : PExpression5
{
    private PExpression6 _expression6_;

    public APassExpression5 ()
    {
    }

    public APassExpression5 (
            PExpression6 _expression6_
    )
    {
        SetExpression6 (_expression6_);
    }

    public override Object Clone()
    {
        return new APassExpression5 (
            (PExpression6)CloneNode (_expression6_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression5(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression6 : PExpression6
{
    private PExpression6 _expression6_;
    private TMult _mult_;
    private PExpression7 _expression7_;

    public AMultiplyExpression6 ()
    {
    }

    public AMultiplyExpression6 (
            PExpression6 _expression6_,
            TMult _mult_,
            PExpression7 _expression7_
    )
    {
        SetExpression6 (_expression6_);
        SetMult (_mult_);
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression6 (
            (PExpression6)CloneNode (_expression6_),
            (TMult)CloneNode (_mult_),
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression6(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
            + ToString (_mult_)
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class ADivideExpression6 : PExpression6
{
    private PExpression6 _expression6_;
    private TDiv _div_;
    private PExpression7 _expression7_;

    public ADivideExpression6 ()
    {
    }

    public ADivideExpression6 (
            PExpression6 _expression6_,
            TDiv _div_,
            PExpression7 _expression7_
    )
    {
        SetExpression6 (_expression6_);
        SetDiv (_div_);
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new ADivideExpression6 (
            (PExpression6)CloneNode (_expression6_),
            (TDiv)CloneNode (_div_),
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpression6(this);
    }

    public PExpression6 GetExpression6 ()
    {
        return _expression6_;
    }

    public void SetExpression6 (PExpression6 node)
    {
        if(_expression6_ != null)
        {
            _expression6_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression6_ = node;
    }
    public TDiv GetDiv ()
    {
        return _div_;
    }

    public void SetDiv (TDiv node)
    {
        if(_div_ != null)
        {
            _div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _div_ = node;
    }
    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression6_)
            + ToString (_div_)
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression6_ == child )
        {
            _expression6_ = null;
            return;
        }
        if ( _div_ == child )
        {
            _div_ = null;
            return;
        }
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression6_ == oldChild )
        {
            SetExpression6 ((PExpression6) newChild);
            return;
        }
        if ( _div_ == oldChild )
        {
            SetDiv ((TDiv) newChild);
            return;
        }
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class APassExpression6 : PExpression6
{
    private PExpression7 _expression7_;

    public APassExpression6 ()
    {
    }

    public APassExpression6 (
            PExpression7 _expression7_
    )
    {
        SetExpression7 (_expression7_);
    }

    public override Object Clone()
    {
        return new APassExpression6 (
            (PExpression7)CloneNode (_expression7_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression6(this);
    }

    public PExpression7 GetExpression7 ()
    {
        return _expression7_;
    }

    public void SetExpression7 (PExpression7 node)
    {
        if(_expression7_ != null)
        {
            _expression7_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression7_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression7_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression7_ == child )
        {
            _expression7_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression7_ == oldChild )
        {
            SetExpression7 ((PExpression7) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression7 : PExpression7
{
    private TSub _sub_;
    private POperand _operand_;

    public ANegativeExpression7 ()
    {
    }

    public ANegativeExpression7 (
            TSub _sub_,
            POperand _operand_
    )
    {
        SetSub (_sub_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression7 (
            (TSub)CloneNode (_sub_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression7(this);
    }

    public TSub GetSub ()
    {
        return _sub_;
    }

    public void SetSub (TSub node)
    {
        if(_sub_ != null)
        {
            _sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sub_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sub_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sub_ == child )
        {
            _sub_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sub_ == oldChild )
        {
            SetSub ((TSub) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpression7 : PExpression7
{
    private POperand1 _operand1_;

    public APassExpression7 ()
    {
    }

    public APassExpression7 (
            POperand1 _operand1_
    )
    {
        SetOperand1 (_operand1_);
    }

    public override Object Clone()
    {
        return new APassExpression7 (
            (POperand1)CloneNode (_operand1_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression7(this);
    }

    public POperand1 GetOperand1 ()
    {
        return _operand1_;
    }

    public void SetOperand1 (POperand1 node)
    {
        if(_operand1_ != null)
        {
            _operand1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand1_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand1_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand1_ == child )
        {
            _operand1_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand1_ == oldChild )
        {
            SetOperand1 ((POperand1) newChild);
            return;
        }
    }

}
public sealed class AParenthesisOperand1 : POperand1
{
    private TOpenParenthesis _open_parenthesis_;
    private PExpression _expression_;
    private TCloseParenthesis _close_parenthesis_;

    public AParenthesisOperand1 ()
    {
    }

    public AParenthesisOperand1 (
            TOpenParenthesis _open_parenthesis_,
            PExpression _expression_,
            TCloseParenthesis _close_parenthesis_
    )
    {
        SetOpenParenthesis (_open_parenthesis_);
        SetExpression (_expression_);
        SetCloseParenthesis (_close_parenthesis_);
    }

    public override Object Clone()
    {
        return new AParenthesisOperand1 (
            (TOpenParenthesis)CloneNode (_open_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TCloseParenthesis)CloneNode (_close_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisOperand1(this);
    }

    public TOpenParenthesis GetOpenParenthesis ()
    {
        return _open_parenthesis_;
    }

    public void SetOpenParenthesis (TOpenParenthesis node)
    {
        if(_open_parenthesis_ != null)
        {
            _open_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _open_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TCloseParenthesis GetCloseParenthesis ()
    {
        return _close_parenthesis_;
    }

    public void SetCloseParenthesis (TCloseParenthesis node)
    {
        if(_close_parenthesis_ != null)
        {
            _close_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _close_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_open_parenthesis_)
            + ToString (_expression_)
            + ToString (_close_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _open_parenthesis_ == child )
        {
            _open_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _close_parenthesis_ == child )
        {
            _close_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _open_parenthesis_ == oldChild )
        {
            SetOpenParenthesis ((TOpenParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _close_parenthesis_ == oldChild )
        {
            SetCloseParenthesis ((TCloseParenthesis) newChild);
            return;
        }
    }

}
public sealed class APassOperand1 : POperand1
{
    private POperand _operand_;

    public APassOperand1 ()
    {
    }

    public APassOperand1 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassOperand1 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassOperand1(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloat _float_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AFloatExpOperand : POperand
{
    private TFloatExp _float_exp_;

    public AFloatExpOperand ()
    {
    }

    public AFloatExpOperand (
            TFloatExp _float_exp_
    )
    {
        SetFloatExp (_float_exp_);
    }

    public override Object Clone()
    {
        return new AFloatExpOperand (
            (TFloatExp)CloneNode (_float_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatExpOperand(this);
    }

    public TFloatExp GetFloatExp ()
    {
        return _float_exp_;
    }

    public void SetFloatExp (TFloatExp node)
    {
        if(_float_exp_ != null)
        {
            _float_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_exp_ == child )
        {
            _float_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_exp_ == oldChild )
        {
            SetFloatExp ((TFloatExp) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
