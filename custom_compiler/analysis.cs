/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAFuncMultipleFunctions(AFuncMultipleFunctions node);
    void CaseASingleFunctions(ASingleFunctions node);
    void CaseAFuncdefFunction(AFuncdefFunction node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseACondStatement(ACondStatement node);
    void CaseAProccallStatement(AProccallStatement node);
    void CaseAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node);
    void CaseAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node);
    void CaseAVariableDeclareStatement(AVariableDeclareStatement node);
    void CaseAConstantDeclareStatement(AConstantDeclareStatement node);
    void CaseAMainFunction(AMainFunction node);
    void CaseAParamsFuncDef(AParamsFuncDef node);
    void CaseANoparamsFuncDef(ANoparamsFuncDef node);
    void CaseAMultipleDefParams(AMultipleDefParams node);
    void CaseAPassingleDefParams(APassingleDefParams node);
    void CaseADefParam(ADefParam node);
    void CaseAParamsProcCall(AParamsProcCall node);
    void CaseANoparamsProcCall(ANoparamsProcCall node);
    void CaseANoParams(ANoParams node);
    void CaseAParamCall(AParamCall node);
    void CaseAMultipleParams(AMultipleParams node);
    void CaseAPassParams(APassParams node);
    void CaseAParam(AParam node);
    void CaseAVariableAssignAssignStatement(AVariableAssignAssignStatement node);
    void CaseAVariableAssignStatement(AVariableAssignStatement node);
    void CaseAConstantMultipleConstants(AConstantMultipleConstants node);
    void CaseASingleConstants(ASingleConstants node);
    void CaseAConstAssignStatement(AConstAssignStatement node);
    void CaseAIfConditionalStatement(AIfConditionalStatement node);
    void CaseAWhileConditionalStatement(AWhileConditionalStatement node);
    void CaseAIfIfStat(AIfIfStat node);
    void CaseASomethingElseStat(ASomethingElseStat node);
    void CaseANoneElseStat(ANoneElseStat node);
    void CaseAWhileStat(AWhileStat node);
    void CaseAOrExpression(AOrExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAAndExpression2(AAndExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseANotExpression3(ANotExpression3 node);
    void CaseAEqualExpression3(AEqualExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseAGreaterExpression4(AGreaterExpression4 node);
    void CaseALessExpression4(ALessExpression4 node);
    void CaseAGreatequalExpression4(AGreatequalExpression4 node);
    void CaseALessequalExpression4(ALessequalExpression4 node);
    void CaseANotequalExpression4(ANotequalExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAAddExpression5(AAddExpression5 node);
    void CaseASubExpression5(ASubExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseAMultiplyExpression6(AMultiplyExpression6 node);
    void CaseADivideExpression6(ADivideExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseANegativeExpression7(ANegativeExpression7 node);
    void CaseAPassExpression7(APassExpression7 node);
    void CaseAParenthesisOperand1(AParenthesisOperand1 node);
    void CaseAPassOperand1(APassOperand1 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAStringOperand(AStringOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAFloatExpOperand(AFloatExpOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTSub(TSub node);
    void CaseTMult(TMult node);
    void CaseTDiv(TDiv node);
    void CaseTEol(TEol node);
    void CaseTLogAnd(TLogAnd node);
    void CaseTLogOr(TLogOr node);
    void CaseTLogNot(TLogNot node);
    void CaseTLogNotEq(TLogNotEq node);
    void CaseTLogEquiv(TLogEquiv node);
    void CaseTLogGreat(TLogGreat node);
    void CaseTLogGreatEq(TLogGreatEq node);
    void CaseTLogLess(TLogLess node);
    void CaseTLogLessEq(TLogLessEq node);
    void CaseTOpenParenthesis(TOpenParenthesis node);
    void CaseTCloseParenthesis(TCloseParenthesis node);
    void CaseTComma(TComma node);
    void CaseTLCurly(TLCurly node);
    void CaseTRCurly(TRCurly node);
    void CaseTEscape(TEscape node);
    void CaseTTypeConst(TTypeConst node);
    void CaseTIfDef(TIfDef node);
    void CaseTElseDef(TElseDef node);
    void CaseTWhileDef(TWhileDef node);
    void CaseTMainDef(TMainDef node);
    void CaseTFunctionDef(TFunctionDef node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTFloatExp(TFloatExp node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleFunctions(ASingleFunctions node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncdefFunction(AFuncdefFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACondStatement(ACondStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProccallStatement(AProccallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainFunction(AMainFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsFuncDef(AParamsFuncDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoparamsFuncDef(ANoparamsFuncDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleDefParams(AMultipleDefParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassingleDefParams(APassingleDefParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADefParam(ADefParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamsProcCall(AParamsProcCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoparamsProcCall(ANoparamsProcCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoParams(ANoParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamCall(AParamCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParams(AMultipleParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassParams(APassParams node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParam(AParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableAssignStatement(AVariableAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleConstants(ASingleConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstAssignStatement(AConstAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfConditionalStatement(AIfConditionalStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfIfStat(AIfIfStat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomethingElseStat(ASomethingElseStat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneElseStat(ANoneElseStat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStat(AWhileStat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrExpression(AOrExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExpression2(AAndExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotExpression3(ANotExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualExpression3(AEqualExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterExpression4(AGreaterExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessExpression4(ALessExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreatequalExpression4(AGreatequalExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessequalExpression4(ALessequalExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotequalExpression4(ANotequalExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression5(AAddExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubExpression5(ASubExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression6(AMultiplyExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpression6(ADivideExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression7(ANegativeExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression7(APassExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisOperand1(AParenthesisOperand1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassOperand1(APassOperand1 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatExpOperand(AFloatExpOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSub(TSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogAnd(TLogAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogOr(TLogOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogNot(TLogNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogNotEq(TLogNotEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogEquiv(TLogEquiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogGreat(TLogGreat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogGreatEq(TLogGreatEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogLess(TLogLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLogLessEq(TLogLessEq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOpenParenthesis(TOpenParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCloseParenthesis(TCloseParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLCurly(TLCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRCurly(TRCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEscape(TEscape node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTTypeConst(TTypeConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIfDef(TIfDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElseDef(TElseDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhileDef(TWhileDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMainDef(TMainDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunctionDef(TFunctionDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloatExp(TFloatExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        InAFuncMultipleFunctions(node);
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        OutAFuncMultipleFunctions(node);
    }
    public virtual void InASingleFunctions(ASingleFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFunctions(ASingleFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFunctions(ASingleFunctions node)
    {
        InASingleFunctions(node);
        OutASingleFunctions(node);
    }
    public virtual void InAFuncdefFunction(AFuncdefFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncdefFunction(AFuncdefFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncdefFunction(AFuncdefFunction node)
    {
        InAFuncdefFunction(node);
        if(node.GetFuncDef() != null)
        {
            node.GetFuncDef().Apply(this);
        }
        OutAFuncdefFunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACondStatement(ACondStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondStatement(ACondStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACondStatement(ACondStatement node)
    {
        InACondStatement(node);
        if(node.GetConditionalStatement() != null)
        {
            node.GetConditionalStatement().Apply(this);
        }
        OutACondStatement(node);
    }
    public virtual void InAProccallStatement(AProccallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProccallStatement(AProccallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAProccallStatement(AProccallStatement node)
    {
        InAProccallStatement(node);
        if(node.GetProcCall() != null)
        {
            node.GetProcCall().Apply(this);
        }
        OutAProccallStatement(node);
    }
    public virtual void InAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        InAVarDeclarationDeclareStatement(node);
        if(node.GetVariableDeclareStatement() != null)
        {
            node.GetVariableDeclareStatement().Apply(this);
        }
        OutAVarDeclarationDeclareStatement(node);
    }
    public virtual void InAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        InAConstDeclarationDeclareStatement(node);
        if(node.GetConstantDeclareStatement() != null)
        {
            node.GetConstantDeclareStatement().Apply(this);
        }
        OutAConstDeclarationDeclareStatement(node);
    }
    public virtual void InAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        InAVariableDeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAVariableDeclareStatement(node);
    }
    public virtual void InAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        InAConstantDeclareStatement(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConstAssignStatement() != null)
        {
            node.GetConstAssignStatement().Apply(this);
        }
        OutAConstantDeclareStatement(node);
    }
    public virtual void InAMainFunction(AMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunction(AMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunction(AMainFunction node)
    {
        InAMainFunction(node);
        if(node.GetMainDef() != null)
        {
            node.GetMainDef().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        OutAMainFunction(node);
    }
    public virtual void InAParamsFuncDef(AParamsFuncDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsFuncDef(AParamsFuncDef node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsFuncDef(AParamsFuncDef node)
    {
        InAParamsFuncDef(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetDefParams() != null)
        {
            node.GetDefParams().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        OutAParamsFuncDef(node);
    }
    public virtual void InANoparamsFuncDef(ANoparamsFuncDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsFuncDef(ANoparamsFuncDef node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsFuncDef(ANoparamsFuncDef node)
    {
        InANoparamsFuncDef(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        OutANoparamsFuncDef(node);
    }
    public virtual void InAMultipleDefParams(AMultipleDefParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleDefParams(AMultipleDefParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleDefParams(AMultipleDefParams node)
    {
        InAMultipleDefParams(node);
        if(node.GetDefParams() != null)
        {
            node.GetDefParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefParam() != null)
        {
            node.GetDefParam().Apply(this);
        }
        OutAMultipleDefParams(node);
    }
    public virtual void InAPassingleDefParams(APassingleDefParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassingleDefParams(APassingleDefParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassingleDefParams(APassingleDefParams node)
    {
        InAPassingleDefParams(node);
        if(node.GetDefParam() != null)
        {
            node.GetDefParam().Apply(this);
        }
        OutAPassingleDefParams(node);
    }
    public virtual void InADefParam(ADefParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefParam(ADefParam node)
    {
        DefaultOut(node);
    }

    public override void CaseADefParam(ADefParam node)
    {
        InADefParam(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        OutADefParam(node);
    }
    public virtual void InAParamsProcCall(AParamsProcCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsProcCall(AParamsProcCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsProcCall(AParamsProcCall node)
    {
        InAParamsProcCall(node);
        if(node.GetParamCall() != null)
        {
            node.GetParamCall().Apply(this);
        }
        OutAParamsProcCall(node);
    }
    public virtual void InANoparamsProcCall(ANoparamsProcCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsProcCall(ANoparamsProcCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsProcCall(ANoparamsProcCall node)
    {
        InANoparamsProcCall(node);
        if(node.GetNoParams() != null)
        {
            node.GetNoParams().Apply(this);
        }
        OutANoparamsProcCall(node);
    }
    public virtual void InANoParams(ANoParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParams(ANoParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParams(ANoParams node)
    {
        InANoParams(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutANoParams(node);
    }
    public virtual void InAParamCall(AParamCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamCall(AParamCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamCall(AParamCall node)
    {
        InAParamCall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAParamCall(node);
    }
    public virtual void InAMultipleParams(AMultipleParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParams(AMultipleParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParams(AMultipleParams node)
    {
        InAMultipleParams(node);
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAMultipleParams(node);
    }
    public virtual void InAPassParams(APassParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassParams(APassParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassParams(APassParams node)
    {
        InAPassParams(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAPassParams(node);
    }
    public virtual void InAParam(AParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParam(AParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAParam(AParam node)
    {
        InAParam(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAParam(node);
    }
    public virtual void InAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        InAVariableAssignAssignStatement(node);
        if(node.GetVariableAssignStatement() != null)
        {
            node.GetVariableAssignStatement().Apply(this);
        }
        OutAVariableAssignAssignStatement(node);
    }
    public virtual void InAVariableAssignStatement(AVariableAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableAssignStatement(AVariableAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableAssignStatement(AVariableAssignStatement node)
    {
        InAVariableAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAVariableAssignStatement(node);
    }
    public virtual void InAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        InAConstantMultipleConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetConstAssignStatement() != null)
        {
            node.GetConstAssignStatement().Apply(this);
        }
        OutAConstantMultipleConstants(node);
    }
    public virtual void InASingleConstants(ASingleConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConstants(ASingleConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConstants(ASingleConstants node)
    {
        InASingleConstants(node);
        OutASingleConstants(node);
    }
    public virtual void InAConstAssignStatement(AConstAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstAssignStatement(AConstAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstAssignStatement(AConstAssignStatement node)
    {
        InAConstAssignStatement(node);
        if(node.GetTypeConst() != null)
        {
            node.GetTypeConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAConstAssignStatement(node);
    }
    public virtual void InAIfConditionalStatement(AIfConditionalStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfConditionalStatement(AIfConditionalStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfConditionalStatement(AIfConditionalStatement node)
    {
        InAIfConditionalStatement(node);
        if(node.GetIfStat() != null)
        {
            node.GetIfStat().Apply(this);
        }
        OutAIfConditionalStatement(node);
    }
    public virtual void InAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        InAWhileConditionalStatement(node);
        if(node.GetWhileStat() != null)
        {
            node.GetWhileStat().Apply(this);
        }
        OutAWhileConditionalStatement(node);
    }
    public virtual void InAIfIfStat(AIfIfStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfIfStat(AIfIfStat node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfIfStat(AIfIfStat node)
    {
        InAIfIfStat(node);
        if(node.GetIfDef() != null)
        {
            node.GetIfDef().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetElseStat() != null)
        {
            node.GetElseStat().Apply(this);
        }
        OutAIfIfStat(node);
    }
    public virtual void InASomethingElseStat(ASomethingElseStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomethingElseStat(ASomethingElseStat node)
    {
        DefaultOut(node);
    }

    public override void CaseASomethingElseStat(ASomethingElseStat node)
    {
        InASomethingElseStat(node);
        if(node.GetElseDef() != null)
        {
            node.GetElseDef().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        OutASomethingElseStat(node);
    }
    public virtual void InANoneElseStat(ANoneElseStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneElseStat(ANoneElseStat node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneElseStat(ANoneElseStat node)
    {
        InANoneElseStat(node);
        OutANoneElseStat(node);
    }
    public virtual void InAWhileStat(AWhileStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStat(AWhileStat node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStat(AWhileStat node)
    {
        InAWhileStat(node);
        if(node.GetWhileDef() != null)
        {
            node.GetWhileDef().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        OutAWhileStat(node);
    }
    public virtual void InAOrExpression(AOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpression(AOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpression(AOrExpression node)
    {
        InAOrExpression(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogOr() != null)
        {
            node.GetLogOr().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAOrExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndExpression2(AAndExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpression2(AAndExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpression2(AAndExpression2 node)
    {
        InAAndExpression2(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogAnd() != null)
        {
            node.GetLogAnd().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAAndExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InANotExpression3(ANotExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpression3(ANotExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpression3(ANotExpression3 node)
    {
        InANotExpression3(node);
        if(node.GetLogNot() != null)
        {
            node.GetLogNot().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutANotExpression3(node);
    }
    public virtual void InAEqualExpression3(AEqualExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualExpression3(AEqualExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualExpression3(AEqualExpression3 node)
    {
        InAEqualExpression3(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogEquiv() != null)
        {
            node.GetLogEquiv().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAEqualExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAGreaterExpression4(AGreaterExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterExpression4(AGreaterExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterExpression4(AGreaterExpression4 node)
    {
        InAGreaterExpression4(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogGreat() != null)
        {
            node.GetLogGreat().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAGreaterExpression4(node);
    }
    public virtual void InALessExpression4(ALessExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessExpression4(ALessExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessExpression4(ALessExpression4 node)
    {
        InALessExpression4(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogLess() != null)
        {
            node.GetLogLess().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutALessExpression4(node);
    }
    public virtual void InAGreatequalExpression4(AGreatequalExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatequalExpression4(AGreatequalExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatequalExpression4(AGreatequalExpression4 node)
    {
        InAGreatequalExpression4(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogGreatEq() != null)
        {
            node.GetLogGreatEq().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutAGreatequalExpression4(node);
    }
    public virtual void InALessequalExpression4(ALessequalExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessequalExpression4(ALessequalExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessequalExpression4(ALessequalExpression4 node)
    {
        InALessequalExpression4(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogLessEq() != null)
        {
            node.GetLogLessEq().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutALessequalExpression4(node);
    }
    public virtual void InANotequalExpression4(ANotequalExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequalExpression4(ANotequalExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequalExpression4(ANotequalExpression4 node)
    {
        InANotequalExpression4(node);
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        if(node.GetLogNotEq() != null)
        {
            node.GetLogNotEq().Apply(this);
        }
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        OutANotequalExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddExpression5(AAddExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression5(AAddExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression5(AAddExpression5 node)
    {
        InAAddExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAAddExpression5(node);
    }
    public virtual void InASubExpression5(ASubExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExpression5(ASubExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExpression5(ASubExpression5 node)
    {
        InASubExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutASubExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAMultiplyExpression6(AMultiplyExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression6(AMultiplyExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression6(AMultiplyExpression6 node)
    {
        InAMultiplyExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAMultiplyExpression6(node);
    }
    public virtual void InADivideExpression6(ADivideExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression6(ADivideExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression6(ADivideExpression6 node)
    {
        InADivideExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutADivideExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InANegativeExpression7(ANegativeExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression7(ANegativeExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression7(ANegativeExpression7 node)
    {
        InANegativeExpression7(node);
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANegativeExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetOperand1() != null)
        {
            node.GetOperand1().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAParenthesisOperand1(AParenthesisOperand1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisOperand1(AParenthesisOperand1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisOperand1(AParenthesisOperand1 node)
    {
        InAParenthesisOperand1(node);
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        OutAParenthesisOperand1(node);
    }
    public virtual void InAPassOperand1(APassOperand1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOperand1(APassOperand1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOperand1(APassOperand1 node)
    {
        InAPassOperand1(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassOperand1(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAFloatExpOperand(AFloatExpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatExpOperand(AFloatExpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatExpOperand(AFloatExpOperand node)
    {
        InAFloatExpOperand(node);
        if(node.GetFloatExp() != null)
        {
            node.GetFloatExp().Apply(this);
        }
        OutAFloatExpOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncMultipleFunctions(AFuncMultipleFunctions node)
    {
        InAFuncMultipleFunctions(node);
        if(node.GetFunction() != null)
        {
            node.GetFunction().Apply(this);
        }
        if(node.GetFunctions() != null)
        {
            node.GetFunctions().Apply(this);
        }
        OutAFuncMultipleFunctions(node);
    }
    public virtual void InASingleFunctions(ASingleFunctions node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleFunctions(ASingleFunctions node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleFunctions(ASingleFunctions node)
    {
        InASingleFunctions(node);
        OutASingleFunctions(node);
    }
    public virtual void InAFuncdefFunction(AFuncdefFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncdefFunction(AFuncdefFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncdefFunction(AFuncdefFunction node)
    {
        InAFuncdefFunction(node);
        if(node.GetFuncDef() != null)
        {
            node.GetFuncDef().Apply(this);
        }
        OutAFuncdefFunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InACondStatement(ACondStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACondStatement(ACondStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACondStatement(ACondStatement node)
    {
        InACondStatement(node);
        if(node.GetConditionalStatement() != null)
        {
            node.GetConditionalStatement().Apply(this);
        }
        OutACondStatement(node);
    }
    public virtual void InAProccallStatement(AProccallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProccallStatement(AProccallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAProccallStatement(AProccallStatement node)
    {
        InAProccallStatement(node);
        if(node.GetProcCall() != null)
        {
            node.GetProcCall().Apply(this);
        }
        OutAProccallStatement(node);
    }
    public virtual void InAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDeclarationDeclareStatement(AVarDeclarationDeclareStatement node)
    {
        InAVarDeclarationDeclareStatement(node);
        if(node.GetVariableDeclareStatement() != null)
        {
            node.GetVariableDeclareStatement().Apply(this);
        }
        OutAVarDeclarationDeclareStatement(node);
    }
    public virtual void InAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstDeclarationDeclareStatement(AConstDeclarationDeclareStatement node)
    {
        InAConstDeclarationDeclareStatement(node);
        if(node.GetConstantDeclareStatement() != null)
        {
            node.GetConstantDeclareStatement().Apply(this);
        }
        OutAConstDeclarationDeclareStatement(node);
    }
    public virtual void InAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableDeclareStatement(AVariableDeclareStatement node)
    {
        InAVariableDeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAVariableDeclareStatement(node);
    }
    public virtual void InAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclareStatement(AConstantDeclareStatement node)
    {
        InAConstantDeclareStatement(node);
        if(node.GetConstAssignStatement() != null)
        {
            node.GetConstAssignStatement().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAConstantDeclareStatement(node);
    }
    public virtual void InAMainFunction(AMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunction(AMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunction(AMainFunction node)
    {
        InAMainFunction(node);
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetMainDef() != null)
        {
            node.GetMainDef().Apply(this);
        }
        OutAMainFunction(node);
    }
    public virtual void InAParamsFuncDef(AParamsFuncDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsFuncDef(AParamsFuncDef node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsFuncDef(AParamsFuncDef node)
    {
        InAParamsFuncDef(node);
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetDefParams() != null)
        {
            node.GetDefParams().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAParamsFuncDef(node);
    }
    public virtual void InANoparamsFuncDef(ANoparamsFuncDef node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsFuncDef(ANoparamsFuncDef node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsFuncDef(ANoparamsFuncDef node)
    {
        InANoparamsFuncDef(node);
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutANoparamsFuncDef(node);
    }
    public virtual void InAMultipleDefParams(AMultipleDefParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleDefParams(AMultipleDefParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleDefParams(AMultipleDefParams node)
    {
        InAMultipleDefParams(node);
        if(node.GetDefParam() != null)
        {
            node.GetDefParam().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetDefParams() != null)
        {
            node.GetDefParams().Apply(this);
        }
        OutAMultipleDefParams(node);
    }
    public virtual void InAPassingleDefParams(APassingleDefParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassingleDefParams(APassingleDefParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassingleDefParams(APassingleDefParams node)
    {
        InAPassingleDefParams(node);
        if(node.GetDefParam() != null)
        {
            node.GetDefParam().Apply(this);
        }
        OutAPassingleDefParams(node);
    }
    public virtual void InADefParam(ADefParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutADefParam(ADefParam node)
    {
        DefaultOut(node);
    }

    public override void CaseADefParam(ADefParam node)
    {
        InADefParam(node);
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADefParam(node);
    }
    public virtual void InAParamsProcCall(AParamsProcCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamsProcCall(AParamsProcCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamsProcCall(AParamsProcCall node)
    {
        InAParamsProcCall(node);
        if(node.GetParamCall() != null)
        {
            node.GetParamCall().Apply(this);
        }
        OutAParamsProcCall(node);
    }
    public virtual void InANoparamsProcCall(ANoparamsProcCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoparamsProcCall(ANoparamsProcCall node)
    {
        DefaultOut(node);
    }

    public override void CaseANoparamsProcCall(ANoparamsProcCall node)
    {
        InANoparamsProcCall(node);
        if(node.GetNoParams() != null)
        {
            node.GetNoParams().Apply(this);
        }
        OutANoparamsProcCall(node);
    }
    public virtual void InANoParams(ANoParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoParams(ANoParams node)
    {
        DefaultOut(node);
    }

    public override void CaseANoParams(ANoParams node)
    {
        InANoParams(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutANoParams(node);
    }
    public virtual void InAParamCall(AParamCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamCall(AParamCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamCall(AParamCall node)
    {
        InAParamCall(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAParamCall(node);
    }
    public virtual void InAMultipleParams(AMultipleParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParams(AMultipleParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParams(AMultipleParams node)
    {
        InAMultipleParams(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetParams() != null)
        {
            node.GetParams().Apply(this);
        }
        OutAMultipleParams(node);
    }
    public virtual void InAPassParams(APassParams node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassParams(APassParams node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassParams(APassParams node)
    {
        InAPassParams(node);
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        OutAPassParams(node);
    }
    public virtual void InAParam(AParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParam(AParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAParam(AParam node)
    {
        InAParam(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAParam(node);
    }
    public virtual void InAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableAssignAssignStatement(AVariableAssignAssignStatement node)
    {
        InAVariableAssignAssignStatement(node);
        if(node.GetVariableAssignStatement() != null)
        {
            node.GetVariableAssignStatement().Apply(this);
        }
        OutAVariableAssignAssignStatement(node);
    }
    public virtual void InAVariableAssignStatement(AVariableAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableAssignStatement(AVariableAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableAssignStatement(AVariableAssignStatement node)
    {
        InAVariableAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableAssignStatement(node);
    }
    public virtual void InAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantMultipleConstants(AConstantMultipleConstants node)
    {
        InAConstantMultipleConstants(node);
        if(node.GetConstAssignStatement() != null)
        {
            node.GetConstAssignStatement().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAConstantMultipleConstants(node);
    }
    public virtual void InASingleConstants(ASingleConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleConstants(ASingleConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleConstants(ASingleConstants node)
    {
        InASingleConstants(node);
        OutASingleConstants(node);
    }
    public virtual void InAConstAssignStatement(AConstAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstAssignStatement(AConstAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstAssignStatement(AConstAssignStatement node)
    {
        InAConstAssignStatement(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetTypeConst() != null)
        {
            node.GetTypeConst().Apply(this);
        }
        OutAConstAssignStatement(node);
    }
    public virtual void InAIfConditionalStatement(AIfConditionalStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfConditionalStatement(AIfConditionalStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfConditionalStatement(AIfConditionalStatement node)
    {
        InAIfConditionalStatement(node);
        if(node.GetIfStat() != null)
        {
            node.GetIfStat().Apply(this);
        }
        OutAIfConditionalStatement(node);
    }
    public virtual void InAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileConditionalStatement(AWhileConditionalStatement node)
    {
        InAWhileConditionalStatement(node);
        if(node.GetWhileStat() != null)
        {
            node.GetWhileStat().Apply(this);
        }
        OutAWhileConditionalStatement(node);
    }
    public virtual void InAIfIfStat(AIfIfStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfIfStat(AIfIfStat node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfIfStat(AIfIfStat node)
    {
        InAIfIfStat(node);
        if(node.GetElseStat() != null)
        {
            node.GetElseStat().Apply(this);
        }
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetIfDef() != null)
        {
            node.GetIfDef().Apply(this);
        }
        OutAIfIfStat(node);
    }
    public virtual void InASomethingElseStat(ASomethingElseStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomethingElseStat(ASomethingElseStat node)
    {
        DefaultOut(node);
    }

    public override void CaseASomethingElseStat(ASomethingElseStat node)
    {
        InASomethingElseStat(node);
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetElseDef() != null)
        {
            node.GetElseDef().Apply(this);
        }
        OutASomethingElseStat(node);
    }
    public virtual void InANoneElseStat(ANoneElseStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneElseStat(ANoneElseStat node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneElseStat(ANoneElseStat node)
    {
        InANoneElseStat(node);
        OutANoneElseStat(node);
    }
    public virtual void InAWhileStat(AWhileStat node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStat(AWhileStat node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStat(AWhileStat node)
    {
        InAWhileStat(node);
        if(node.GetRCurly() != null)
        {
            node.GetRCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLCurly() != null)
        {
            node.GetLCurly().Apply(this);
        }
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        if(node.GetWhileDef() != null)
        {
            node.GetWhileDef().Apply(this);
        }
        OutAWhileStat(node);
    }
    public virtual void InAOrExpression(AOrExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExpression(AOrExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExpression(AOrExpression node)
    {
        InAOrExpression(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogOr() != null)
        {
            node.GetLogOr().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAOrExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndExpression2(AAndExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExpression2(AAndExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExpression2(AAndExpression2 node)
    {
        InAAndExpression2(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogAnd() != null)
        {
            node.GetLogAnd().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAAndExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InANotExpression3(ANotExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExpression3(ANotExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExpression3(ANotExpression3 node)
    {
        InANotExpression3(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetLogNot() != null)
        {
            node.GetLogNot().Apply(this);
        }
        OutANotExpression3(node);
    }
    public virtual void InAEqualExpression3(AEqualExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualExpression3(AEqualExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualExpression3(AEqualExpression3 node)
    {
        InAEqualExpression3(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogEquiv() != null)
        {
            node.GetLogEquiv().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAEqualExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAGreaterExpression4(AGreaterExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterExpression4(AGreaterExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterExpression4(AGreaterExpression4 node)
    {
        InAGreaterExpression4(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogGreat() != null)
        {
            node.GetLogGreat().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAGreaterExpression4(node);
    }
    public virtual void InALessExpression4(ALessExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessExpression4(ALessExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessExpression4(ALessExpression4 node)
    {
        InALessExpression4(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogLess() != null)
        {
            node.GetLogLess().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutALessExpression4(node);
    }
    public virtual void InAGreatequalExpression4(AGreatequalExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreatequalExpression4(AGreatequalExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreatequalExpression4(AGreatequalExpression4 node)
    {
        InAGreatequalExpression4(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogGreatEq() != null)
        {
            node.GetLogGreatEq().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutAGreatequalExpression4(node);
    }
    public virtual void InALessequalExpression4(ALessequalExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessequalExpression4(ALessequalExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessequalExpression4(ALessequalExpression4 node)
    {
        InALessequalExpression4(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogLessEq() != null)
        {
            node.GetLogLessEq().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutALessequalExpression4(node);
    }
    public virtual void InANotequalExpression4(ANotequalExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequalExpression4(ANotequalExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequalExpression4(ANotequalExpression4 node)
    {
        InANotequalExpression4(node);
        if(node.GetTwo() != null)
        {
            node.GetTwo().Apply(this);
        }
        if(node.GetLogNotEq() != null)
        {
            node.GetLogNotEq().Apply(this);
        }
        if(node.GetOne() != null)
        {
            node.GetOne().Apply(this);
        }
        OutANotequalExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddExpression5(AAddExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression5(AAddExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression5(AAddExpression5 node)
    {
        InAAddExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAAddExpression5(node);
    }
    public virtual void InASubExpression5(ASubExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubExpression5(ASubExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubExpression5(ASubExpression5 node)
    {
        InASubExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutASubExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAMultiplyExpression6(AMultiplyExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression6(AMultiplyExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression6(AMultiplyExpression6 node)
    {
        InAMultiplyExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAMultiplyExpression6(node);
    }
    public virtual void InADivideExpression6(ADivideExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression6(ADivideExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression6(ADivideExpression6 node)
    {
        InADivideExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutADivideExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InANegativeExpression7(ANegativeExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression7(ANegativeExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression7(ANegativeExpression7 node)
    {
        InANegativeExpression7(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        OutANegativeExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetOperand1() != null)
        {
            node.GetOperand1().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAParenthesisOperand1(AParenthesisOperand1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisOperand1(AParenthesisOperand1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisOperand1(AParenthesisOperand1 node)
    {
        InAParenthesisOperand1(node);
        if(node.GetCloseParenthesis() != null)
        {
            node.GetCloseParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOpenParenthesis() != null)
        {
            node.GetOpenParenthesis().Apply(this);
        }
        OutAParenthesisOperand1(node);
    }
    public virtual void InAPassOperand1(APassOperand1 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassOperand1(APassOperand1 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassOperand1(APassOperand1 node)
    {
        InAPassOperand1(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassOperand1(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAFloatExpOperand(AFloatExpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatExpOperand(AFloatExpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatExpOperand(AFloatExpOperand node)
    {
        InAFloatExpOperand(node);
        if(node.GetFloatExp() != null)
        {
            node.GetFloatExp().Apply(this);
        }
        OutAFloatExpOperand(node);
    }
}
} // namespace CS426.analysis
